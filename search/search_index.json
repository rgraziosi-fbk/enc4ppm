{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"enc4ppm","text":"<p>Welcome to the documentation for <code>enc4ppm</code>.</p>"},{"location":"example/","title":"Usage Example","text":"<p>This page provides example usage of the <code>enc4ppm</code> package.</p>"},{"location":"reference/base_encoder/","title":"BaseEncoder Module API Reference","text":""},{"location":"reference/base_encoder/#enc4ppm.base_encoder.BaseEncoder","title":"<code>BaseEncoder</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>enc4ppm/base_encoder.py</code> <pre><code>class BaseEncoder(ABC):\n    def __init__(self, case_id_key: str = 'case_id', activity_key: str = 'activity') -&gt; None:\n        \"\"\"\n        Initialize the BaseEncoder.\n\n        Args:\n            case_id_key: Column name for case identifiers.\n            activity_key: Column name for activity names.\n        \"\"\"\n        self.case_id_key = case_id_key\n        self.activity_key = activity_key\n\n    @abstractmethod\n    def encode(self, df: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"\n        Encode the given event log DataFrame.\n\n        Args:\n            df: Event log with at least case_id, activity, and timestamp columns.\n\n        Returns:\n            Encoded feature representation.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/base_encoder/#enc4ppm.base_encoder.BaseEncoder.__init__","title":"<code>__init__(case_id_key='case_id', activity_key='activity')</code>","text":"<p>Initialize the BaseEncoder.</p> <p>Parameters:</p> Name Type Description Default <code>case_id_key</code> <code>str</code> <p>Column name for case identifiers.</p> <code>'case_id'</code> <code>activity_key</code> <code>str</code> <p>Column name for activity names.</p> <code>'activity'</code> Source code in <code>enc4ppm/base_encoder.py</code> <pre><code>def __init__(self, case_id_key: str = 'case_id', activity_key: str = 'activity') -&gt; None:\n    \"\"\"\n    Initialize the BaseEncoder.\n\n    Args:\n        case_id_key: Column name for case identifiers.\n        activity_key: Column name for activity names.\n    \"\"\"\n    self.case_id_key = case_id_key\n    self.activity_key = activity_key\n</code></pre>"},{"location":"reference/base_encoder/#enc4ppm.base_encoder.BaseEncoder.encode","title":"<code>encode(df)</code>  <code>abstractmethod</code>","text":"<p>Encode the given event log DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Event log with at least case_id, activity, and timestamp columns.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Encoded feature representation.</p> Source code in <code>enc4ppm/base_encoder.py</code> <pre><code>@abstractmethod\ndef encode(self, df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Encode the given event log DataFrame.\n\n    Args:\n        df: Event log with at least case_id, activity, and timestamp columns.\n\n    Returns:\n        Encoded feature representation.\n    \"\"\"\n    pass\n</code></pre>"}]}