{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"enc4ppm","text":"<p>Welcome to the documentation for <code>enc4ppm</code>.</p>"},{"location":"example/","title":"Usage Example","text":"<p>This page provides example usage of the <code>enc4ppm</code> package.</p>"},{"location":"reference/frequency_encoder/","title":"FrequencyEncoder Module API Reference","text":""},{"location":"reference/frequency_encoder/#enc4ppm.frequency_encoder.FrequencyEncoder","title":"<code>FrequencyEncoder</code>","text":"<p>               Bases: <code>BaseEncoder</code></p> <p>Initialize the FrequencyEncoder.</p> <p>Parameters:</p> Name Type Description Default <code>case_id_key</code> <code>str</code> <p>Column name for case identifiers.</p> <code>'case:concept:name'</code> <code>activity_key</code> <code>str</code> <p>Column name for activity names.</p> <code>'concept:name'</code> <code>timestamp_key</code> <code>str</code> <p>Column name for timestamps.</p> <code>'time:timestamp'</code> Source code in <code>src/enc4ppm/frequency_encoder.py</code> <pre><code>class FrequencyEncoder(BaseEncoder):\n    \"\"\"\n    Initialize the FrequencyEncoder.\n\n    Args:\n        case_id_key: Column name for case identifiers.\n        activity_key: Column name for activity names.\n        timestamp_key: Column name for timestamps.\n    \"\"\"\n    def __init__(\n            self,\n            case_id_key: str = 'case:concept:name',\n            activity_key: str = 'concept:name',\n            timestamp_key: str = 'time:timestamp') -&gt; None:\n        super().__init__(case_id_key, activity_key, timestamp_key)\n\n    def encode(self, df: pd.DataFrame) -&gt; pd.DataFrame:\n        # BaseEncoder logic\n        df = super().validate_and_prepare_log(df)\n\n        # Custom logic\n        activities = df[self.activity_key].unique().tolist()\n        cases = df[self.case_id_key].unique().tolist()\n        max_prefix_length = df.groupby(self.case_id_key).size().max()\n\n        encoded_df = pd.DataFrame(columns=[self.case_id_key] + activities)\n\n        for prefix_length in range(1, max_prefix_length+1):\n            for case in cases:\n                case_events = df[df[self.case_id_key] == case]\n                if len(case_events) &lt; prefix_length: continue\n                case_events = case_events.iloc[:prefix_length]\n\n                encoded_row = { self.case_id_key: case, **{ activity: 0 for activity in activities } }\n\n                for activity in activities:\n                    activity_events = case_events[case_events[self.activity_key] == activity]\n                    encoded_row[activity] = activity_events.shape[0]\n\n                encoded_df = pd.concat([encoded_df, pd.DataFrame([encoded_row])], ignore_index=True)\n\n        return encoded_df\n</code></pre>"}]}